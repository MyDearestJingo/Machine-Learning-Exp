# -*- coding: utf-8 -*-
"""ML-Semester-Lab1-ClosedForm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cCAu_o0b1iC0b3oDl4OC0xK9R5TAnBTc
"""

from sklearn.datasets import load_svmlight_file as lsf
from sklearn.model_selection import train_test_split as tts
from io import BytesIO
import requests
import numpy as np
import matplotlib.pyplot as plt

test_size = 0.25

r = requests.get("https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/regression/housing_scale")

f = BytesIO(r.content)
x, y = lsf(f, n_features = 13)

x = x.toarray()
n_samples, n_features = x.shape
x = np.column_stack((x, np.ones((n_samples, 1))))
y = y.reshape((-1,1))

x_train, x_val, y_train, y_val  = tts(x,y,test_size = test_size)

def closed_formed(x_train,y_train,x_val,y_val):
  n_samples, n_features = x_train.shape
  w = np.zeros((n_features,1))

  w = np.dot(x_train.T, x_train)
  w = np.matrix(w)
  w = w.I
  w = np.dot(np.dot(w,x_train.T), y_train)
  
  l_train = np.sum(np.power(np.dot(x_train,w)-y_train,2))/2
  l_val = np.sum(np.power(np.dot(x_val,w)-y_val,2))/2 
  return l_train, l_val

print(closed_formed(x_train, y_train, x_val, y_val))

#w = np.zeros((n_features+1,1))

#w = (np.dot(x_train.T, x_train))
#w = np.matrix(w)
#w = w.I
#w = np.dot(np.dot(w,x_train.T),y_train)

#l_train = np.sum(np.power(np.dot(x_train,w)-y_train,2))/2
#l_val = np.sum(np.power(np.dot(x_val,w)-y_val,2))/2 
#print('Train Loss: ', l_train)
#print('Validation Loss: ', l_val)

